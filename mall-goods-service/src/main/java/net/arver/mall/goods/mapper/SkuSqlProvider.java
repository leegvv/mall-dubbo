package net.arver.mall.goods.mapper;

import java.util.List;
import java.util.Map;
import net.arver.mall.goods.model.Sku;
import net.arver.mall.goods.model.SkuExample.Criteria;
import net.arver.mall.goods.model.SkuExample.Criterion;
import net.arver.mall.goods.model.SkuExample;
import org.apache.ibatis.jdbc.SQL;

public class SkuSqlProvider {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_sku
     *
     * @mbg.generated Wed Jul 08 23:31:15 CST 2020
     */
    public String countByExample(SkuExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("tb_sku");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_sku
     *
     * @mbg.generated Wed Jul 08 23:31:15 CST 2020
     */
    public String deleteByExample(SkuExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("tb_sku");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_sku
     *
     * @mbg.generated Wed Jul 08 23:31:15 CST 2020
     */
    public String insertSelective(Sku record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("tb_sku");

        if (record.getSn() != null) {
            sql.VALUES("sn", "#{sn,jdbcType=VARCHAR}");
        }

        if (record.getName() != null) {
            sql.VALUES("name", "#{name,jdbcType=VARCHAR}");
        }

        if (record.getPrice() != null) {
            sql.VALUES("price", "#{price,jdbcType=INTEGER}");
        }

        if (record.getNum() != null) {
            sql.VALUES("num", "#{num,jdbcType=INTEGER}");
        }

        if (record.getAlertNum() != null) {
            sql.VALUES("alert_num", "#{alertNum,jdbcType=INTEGER}");
        }

        if (record.getImage() != null) {
            sql.VALUES("image", "#{image,jdbcType=VARCHAR}");
        }

        if (record.getImages() != null) {
            sql.VALUES("images", "#{images,jdbcType=VARCHAR}");
        }

        if (record.getWeight() != null) {
            sql.VALUES("weight", "#{weight,jdbcType=INTEGER}");
        }

        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }

        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=TIMESTAMP}");
        }

        if (record.getSpuId() != null) {
            sql.VALUES("spu_id", "#{spuId,jdbcType=VARCHAR}");
        }

        if (record.getCategoryId() != null) {
            sql.VALUES("category_id", "#{categoryId,jdbcType=INTEGER}");
        }

        if (record.getCategoryName() != null) {
            sql.VALUES("category_name", "#{categoryName,jdbcType=VARCHAR}");
        }

        if (record.getBrandName() != null) {
            sql.VALUES("brand_name", "#{brandName,jdbcType=VARCHAR}");
        }

        if (record.getSpec() != null) {
            sql.VALUES("spec", "#{spec,jdbcType=VARCHAR}");
        }

        if (record.getSaleNum() != null) {
            sql.VALUES("sale_num", "#{saleNum,jdbcType=INTEGER}");
        }

        if (record.getCommentNum() != null) {
            sql.VALUES("comment_num", "#{commentNum,jdbcType=INTEGER}");
        }

        if (record.getStatus() != null) {
            sql.VALUES("status", "#{status,jdbcType=CHAR}");
        }

        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_sku
     *
     * @mbg.generated Wed Jul 08 23:31:15 CST 2020
     */
    public String selectByExample(SkuExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("sn");
        sql.SELECT("name");
        sql.SELECT("price");
        sql.SELECT("num");
        sql.SELECT("alert_num");
        sql.SELECT("image");
        sql.SELECT("images");
        sql.SELECT("weight");
        sql.SELECT("create_time");
        sql.SELECT("update_time");
        sql.SELECT("spu_id");
        sql.SELECT("category_id");
        sql.SELECT("category_name");
        sql.SELECT("brand_name");
        sql.SELECT("spec");
        sql.SELECT("sale_num");
        sql.SELECT("comment_num");
        sql.SELECT("status");
        sql.FROM("tb_sku");
        applyWhere(sql, example, false);

        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }

        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_sku
     *
     * @mbg.generated Wed Jul 08 23:31:15 CST 2020
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        Sku record = (Sku) parameter.get("record");
        SkuExample example = (SkuExample) parameter.get("example");

        SQL sql = new SQL();
        sql.UPDATE("tb_sku");

        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=VARCHAR}");
        }

        if (record.getSn() != null) {
            sql.SET("sn = #{record.sn,jdbcType=VARCHAR}");
        }

        if (record.getName() != null) {
            sql.SET("name = #{record.name,jdbcType=VARCHAR}");
        }

        if (record.getPrice() != null) {
            sql.SET("price = #{record.price,jdbcType=INTEGER}");
        }

        if (record.getNum() != null) {
            sql.SET("num = #{record.num,jdbcType=INTEGER}");
        }

        if (record.getAlertNum() != null) {
            sql.SET("alert_num = #{record.alertNum,jdbcType=INTEGER}");
        }

        if (record.getImage() != null) {
            sql.SET("image = #{record.image,jdbcType=VARCHAR}");
        }

        if (record.getImages() != null) {
            sql.SET("images = #{record.images,jdbcType=VARCHAR}");
        }

        if (record.getWeight() != null) {
            sql.SET("weight = #{record.weight,jdbcType=INTEGER}");
        }

        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        }

        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        }

        if (record.getSpuId() != null) {
            sql.SET("spu_id = #{record.spuId,jdbcType=VARCHAR}");
        }

        if (record.getCategoryId() != null) {
            sql.SET("category_id = #{record.categoryId,jdbcType=INTEGER}");
        }

        if (record.getCategoryName() != null) {
            sql.SET("category_name = #{record.categoryName,jdbcType=VARCHAR}");
        }

        if (record.getBrandName() != null) {
            sql.SET("brand_name = #{record.brandName,jdbcType=VARCHAR}");
        }

        if (record.getSpec() != null) {
            sql.SET("spec = #{record.spec,jdbcType=VARCHAR}");
        }

        if (record.getSaleNum() != null) {
            sql.SET("sale_num = #{record.saleNum,jdbcType=INTEGER}");
        }

        if (record.getCommentNum() != null) {
            sql.SET("comment_num = #{record.commentNum,jdbcType=INTEGER}");
        }

        if (record.getStatus() != null) {
            sql.SET("status = #{record.status,jdbcType=CHAR}");
        }

        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_sku
     *
     * @mbg.generated Wed Jul 08 23:31:15 CST 2020
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("tb_sku");

        sql.SET("id = #{record.id,jdbcType=VARCHAR}");
        sql.SET("sn = #{record.sn,jdbcType=VARCHAR}");
        sql.SET("name = #{record.name,jdbcType=VARCHAR}");
        sql.SET("price = #{record.price,jdbcType=INTEGER}");
        sql.SET("num = #{record.num,jdbcType=INTEGER}");
        sql.SET("alert_num = #{record.alertNum,jdbcType=INTEGER}");
        sql.SET("image = #{record.image,jdbcType=VARCHAR}");
        sql.SET("images = #{record.images,jdbcType=VARCHAR}");
        sql.SET("weight = #{record.weight,jdbcType=INTEGER}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        sql.SET("spu_id = #{record.spuId,jdbcType=VARCHAR}");
        sql.SET("category_id = #{record.categoryId,jdbcType=INTEGER}");
        sql.SET("category_name = #{record.categoryName,jdbcType=VARCHAR}");
        sql.SET("brand_name = #{record.brandName,jdbcType=VARCHAR}");
        sql.SET("spec = #{record.spec,jdbcType=VARCHAR}");
        sql.SET("sale_num = #{record.saleNum,jdbcType=INTEGER}");
        sql.SET("comment_num = #{record.commentNum,jdbcType=INTEGER}");
        sql.SET("status = #{record.status,jdbcType=CHAR}");

        SkuExample example = (SkuExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_sku
     *
     * @mbg.generated Wed Jul 08 23:31:15 CST 2020
     */
    public String updateByPrimaryKeySelective(Sku record) {
        SQL sql = new SQL();
        sql.UPDATE("tb_sku");

        if (record.getSn() != null) {
            sql.SET("sn = #{sn,jdbcType=VARCHAR}");
        }

        if (record.getName() != null) {
            sql.SET("name = #{name,jdbcType=VARCHAR}");
        }

        if (record.getPrice() != null) {
            sql.SET("price = #{price,jdbcType=INTEGER}");
        }

        if (record.getNum() != null) {
            sql.SET("num = #{num,jdbcType=INTEGER}");
        }

        if (record.getAlertNum() != null) {
            sql.SET("alert_num = #{alertNum,jdbcType=INTEGER}");
        }

        if (record.getImage() != null) {
            sql.SET("image = #{image,jdbcType=VARCHAR}");
        }

        if (record.getImages() != null) {
            sql.SET("images = #{images,jdbcType=VARCHAR}");
        }

        if (record.getWeight() != null) {
            sql.SET("weight = #{weight,jdbcType=INTEGER}");
        }

        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }

        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=TIMESTAMP}");
        }

        if (record.getSpuId() != null) {
            sql.SET("spu_id = #{spuId,jdbcType=VARCHAR}");
        }

        if (record.getCategoryId() != null) {
            sql.SET("category_id = #{categoryId,jdbcType=INTEGER}");
        }

        if (record.getCategoryName() != null) {
            sql.SET("category_name = #{categoryName,jdbcType=VARCHAR}");
        }

        if (record.getBrandName() != null) {
            sql.SET("brand_name = #{brandName,jdbcType=VARCHAR}");
        }

        if (record.getSpec() != null) {
            sql.SET("spec = #{spec,jdbcType=VARCHAR}");
        }

        if (record.getSaleNum() != null) {
            sql.SET("sale_num = #{saleNum,jdbcType=INTEGER}");
        }

        if (record.getCommentNum() != null) {
            sql.SET("comment_num = #{commentNum,jdbcType=INTEGER}");
        }

        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=CHAR}");
        }

        sql.WHERE("id = #{id,jdbcType=VARCHAR}");

        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_sku
     *
     * @mbg.generated Wed Jul 08 23:31:15 CST 2020
     */
    protected void applyWhere(SQL sql, SkuExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }

        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }

        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }

                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }

                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }

        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}
